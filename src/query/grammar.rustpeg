use query::ast::*;

#[pub]
expr -> Box<Expr>
        = __* expr:(sample_union / relaxed_intersection / diff / union / single_sample) __* {expr}

compl -> Box<Expr>
         = diff / union / relaxed_intersection

atom -> Box<Expr>
        = single_sample
        / "(" __* expr:sample_union __* ")" { expr }
        / "(" __* expr:diff __* ")" { expr }
        / "(" __* expr:union __* ")" { expr }
        / "(" __* expr:relaxed_intersection __* ")" { expr }

sample -> String
          = [a-zA-Z0-9_\.-]+ { match_str.to_string() }

sample_union -> Box<Expr>
                = s:sample __+ "+" __+ samples:sample ++ (__+ "+" __+) {
                    let mut all = vec![s];
                    all.extend(samples);
                    Box::new(SampleUnion{ samples: all })
                }

single_sample -> Box<Expr>
                 = s:sample { Box::new(SampleUnion { samples: vec![s] }) }

diff -> Box<Expr>
        = l:atom __+ "-" __+ r:atom { Box::new(Diff { left: l, right: r }) }

union -> Box<Expr>
         = l:single_sample __+ "+" __+ "(" __* r:compl __* ")" { Box::new(Union { left: l, right: r }) }
         / "(" __* l:compl __* ")" __+ "+" __+ r:single_sample { Box::new(Union { left: l, right: r }) }
         / "(" __* l:compl __* ")" __+ "+" __+ "(" __* r:compl __* ")" { Box::new(Union { left: l, right: r }) }

relaxed_intersection -> Box<Expr>
                        = children:atom ++ (__+ "x" __+) __+ "with" __+ "k" __* "=" __* k:number {
                            Box::new(RelaxedIntersection { children: children, k: k })
                        }

number -> usize
          = [0-9]+ { match_str.parse().unwrap() }

__ = (whitespace / eol)

/* Modeled after ECMA-262, 5th ed., 7.3. */
eol
    = "\n"
    / "\r\n"
    / "\r"
    / "\u{2028}"
    / "\u{2029}"

/* Modeled after ECMA-262, 5th ed., 7.2. */
whitespace
    = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed
